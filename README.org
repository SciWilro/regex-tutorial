Tutorial on named capture regular expressions in R and Python

# disable underscore subscripts
#+OPTIONS: ^:nil

In this 60 minute tutorial I will explain how to use named capture
regular expressions to extract data from several different kinds
structured text data.

** Introduction to named capture regular expressions, 15 minutes

Why would you want to use named capture regular expressions? They are
useful when you want to extract groups of substrings from text data
which has some structure, but no consistent delimiter such as tabs or
commas between groups. They make it easy to convert such loosely
structured text data into regular CSV/TSV data.
- The regular expression =5 foo bar= matches any string that contains
  =5 foo bar= as a substring.
- The regular expression =foo|bar= matches any string that contains
  =foo= or =bar=. The vertical bar indicates *alternation* -- if any one
  of the options is present, then there is a match.
- Square brackets are used to indicate a *character class*. The
  regular expression =[0-9] foo bar= means match any digit, followed
  by a space, followed by =foo bar=.
- A *capturing* regular expression includes parentheses for extracting
  data when there is a match. For example if we apply the regular
  expression =([0-9]) (foo|bar)= to the string =prefix 8 foo suffix=,
  we put =8= in the first capture group and =foo= in the second.
- A *named capture* regular expression includes group names. For
  example if we apply the regular expression =(?<number>[0-9])
  (?<string>foo|bar)= to the string =prefix 8 foo suffix=, we put =8=
  in the capture group named =number=, and =foo= in the capture group
  named =string=.

Named capture regular expressions are better than simple capturing
regular expressions, since you can refer to the extracted data by
*name* rather than by an arbitrary index. That results in code that is
much easier to understand. For example in Python,

#+BEGIN_SRC python
import re
subject = 'chr10:213,054,000-213,055,000'
compiled_pattern = re.compile(r"""
(?P<chrom>chr.*?)
:
(?P<chromStart>.*?)
-
(?P<chromEnd>[0-9,]*)
""", re.VERBOSE)
print compiled_pattern.match(subject).groups()[1]
print compiled_pattern.match(subject).groupdict()["chromStart"]
#+END_SRC

Both print statements show the same thing, but the intent of the
second is clearer since we wrote the group name (chromStart) rather
than the index (1).

*** Named capture in R

Base R supports named capture regular expressions via C code that
interfaces the Perl-Compatible Regular Expressions (PCRE) library. I
wrote the code in https://svn.r-project.org/R/trunk/src/main/grep.c
which implements named capture regular expression support for R. It
was merged into base R in 2011
https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=14518, and has
been included with every copy of R since version 2.14.

The base functions =regexpr= and =gregexpr= use PCRE when given the
perl=TRUE argument. The first argument is the *pattern*, a single
regular expression (character vector of length 1), and the second
argument is the character vector of *subjects* (strings to
parse). However their output is a bunch of integers and group names,
so I wrote some functions in the [[https://github.com/tdhock/namedCapture][namedCapture]] package that return
character matrices or data.frames, with column names as defined in the
named groups of the regular expression. To install the namedCapture
package, run the following commands in R:

#+BEGIN_SRC R
if(!require(devtools))install.packages("devtools")
devtools::install_github("tdhock/namedCapture")
#+END_SRC

Notes on related functions/packages: 
- =regexec= and =regmatches= in base R implement extracting capture
  groups but the =regexec= man page indicates that perl=TRUE (and thus
  named capture) is not implemented.
- =stringr::str_match= implements extracting capture groups. But since
  it uses the stringi package (an interface to the [[http://userguide.icu-project.org/strings/regexp][ICU]] library), [[https://github.com/hadley/stringr/pull/16][it
  does not support named capture]].
- https://github.com/tdhock/revector provides fast C code for a
  *vector* of named capture regular expressions (base R only provides
  functions for a single regular expression).

*** Named capture in Python

Note that in Python a =P= is required after the initial question mark
of each group: =(?P<name>pattern)=.

The =re= module implements named capture regular expression support
via the =M.groupdict()= method for a match object =M=.

The =pandas= module for data analysis has some support for named
capture regular expressions. To install pandas execute one of the
following shell commands:

#+BEGIN_SRC shell
pip install pandas
easy_install pandas
#+END_SRC

For an instance =S= of the Series class, pandas provides the excellent
=S.str.extract= method which is the analog of =str_match_named= in
R. However the analog of =str_match_all_named= seems to be
=S.str.findall=, which does not support named capture.

*** Summary of function syntax

For a subject =S= (R character vector or Python pandas Series) and a
regular expression pattern =P= (string),

| base R function           | R wrapper function        | Python pandas           | returns                     |
|---------------------------+---------------------------+-------------------------+-----------------------------|
| regexpr(P, S, perl=TRUE)  | str_match_named(S, P)     | S.str.extract(P, flags) | one match per subject       |
| gregexpr(P, S, perl=TRUE) | str_match_all_named(S, P) | S.str.findall(P, flags) | several matches per subject |

*** References

The definitive reference is the book "Mastering Regular Expressions,"
by Jeffrey E.F. Freidl. It contains lots of information on how to
write regular expressions in several languages (Java, .NET, PHP), and
also how to implement a regular expression library like PCRE.

http://www.regular-expressions.info has some reference on how to write
regular expressions in several languages. However it discusses neither
named capture in R, nor pandas in Python.

** Some examples, 30 minutes

| code                       | functions                                    |
|----------------------------+----------------------------------------------|
| [[file:chr.pos.R]]             | str_match_named, str_match_all_named, gsub   |
| [[file:differences_from_R.py]] | re.search, re.compile                        |
| [[file:qsub-out.R]]            | str_match_named                              |
| [[file:trackDb.R]]             | str_match_all_named                          |

** Exercises, 15 minutes

*** Questions from the audience

How do you ever extracted data from text files? Show us how you
extracted some data from a particular text file, and we will try to
suggest improvements.

*** Implementing a Python function for named capture

I wrote the Python function [[file:str_match.py][str_match_named]] to be analogous to the R
function. To my knowledge there is no analog for =str_match_all_named=
in Python. Exercise 1: implement a function that inputs a list of
subject strings and outputs a list of multiple matches per subject
(each list should contain a list of dicts, one for each match).

Exercise 2: As of pandas 0.16.2 there is no =str.extractall= method
which I expect should return a list of DataFrames, one for each
subject. Exercise for the reader: fork pandas, add the
=str_extractall= function to
https://github.com/pydata/pandas/blob/master/pandas/core/strings.py,
and submit them a PR, being careful to follow [[http://pandas.pydata.org/pandas-docs/stable/contributing.html][their guidelines for
code contributions]].


